trick: |
  ## Problem:
  {problem_prompt}
  {sample_io_prompt}
  
  Competitive programming problem can often be solved by identifying a mathematical trick or way to simplify the problem, or specific datastructure / algorithm that when used makes the problem solvable efficiently.
  You are an expert competitive programmer. Think step by step and describe a trick like this that can be used to solve the above competitive coding problem. Think carefully about the constraints and time complexity needed.
  Check if 1) a mathematical constant time or 2) an approximate solution is allowed. if yes then solve it this way.
  Your response must contain only the trick and be concise.

trick2: |
  You are a world-class competitive programmer who has been given the below problem:
  
  ```
  {problem_prompt}
  {sample_io_prompt}
  ```
  -----------
  
  Answer the following questions:
  
  1. Reflect on the problem, and describe it in your own words, in bullet points. Pay attention to small details, nuances, notes and examples in the problem description.
  2. Is an O(1) Math algorithm possible? Are approximate solutions allowed?
  3. identify a simple but clever trick to solving the following competitive coding problem correctly and efficiently.

  For each trick, be concise, and focus on the crux of how it uses a given algorithm to solve the problem.
  
  Do not describe how to solve the problem and do not provide code.

trick3: |
  You are an expert competitive programmer.
  Determine the best possible time complexity taking into account all constraints and all details provided in the problem statement
  Identify 1 different but all similar tricks to solving the following competitive coding problem correctly and efficiently.
  For each trick, be concise, and focus on the crux of how it uses a given algorithm or data structure to solve the problem.
  
  # Problem to be solved:
  {problem_prompt}
  {sample_io_prompt}
  
  # Complexity
  1. With the largest input in mind (as given by constraints), calculate step by step what time complexity is required.
  2. Is an O(1) Math algorithm possible? Are approximate solutions allowed?
  
  # Tricks
  identify 1 different possible tricks to solving the following competitive coding problem correctly and efficiently.
  For each trick state it's time complexity, which must be less than the complexity determined initially.
  
  Give your response in the following format:
  
  # Complexity
  
  # Tricks
  
  Do not describe how to solve the problem in detail and do not provide code.

observation: |
  ## Problem:
  {problem_prompt}
  {sample_io_prompt}
  --------------
  Generate an insightful and concise observation about the problem in one line. Your observation should not explain how to solve the problem or contain code. It must be one line.

coding: |
  ## Problem:
  {problem_prompt}
  {sample_io_prompt}
  {observation}
  ----------------
  
  You are an expert competitive programmer.
  Lets think step by step to generate correct {language} code to solve the above competitive coding problem.
  Consider the problem mathematically, taking into account the time complexity and edge cases.
  Check if the problem allows for approximations.
  Important:
  {lang_specific_tips}
  
  ## Your response must contain only the {language} code to solve this problem. Do not add extra explanation or words.

coding-cot: |
  You are a world class competitive programmer.
  
  ## Problem:
  {problem_prompt}
  {sample_io_prompt}
  {observation}
 
  ## Step-By-Step reasoning
  Lets think step by step for how to solve this competitive coding problem efficiently and correctly.
  Consider the problem mathematically, taking into account the time complexity and edge cases.
  Check if the problem allows for approximations.
  Be concise.
  
  ## Code
  Code block containing full code to solve problem
  
   ----------------
  Important:
  {lang_specific_tips}
  
  ## Your response must contain the concise Step-By-Step reasoning and then the {language} code block to solve this problem.

coding_improvement_A: |
  ## Problem:
  {problem_prompt}
  {sample_io_prompt}

  ## Code:
  {code}

  # Step 1: Identify Issues
  Analyze the code for any bugs, inefficiencies, or unhandled cases.

  # Step 2: Edge Case Generation
  Invent at least one edge case that the current solution might fail on. Justify why this edge case is important and how it exposes a weakness in the code.

  # Step 3: Improve Code
  Refactor the code to address the identified issues and handle all edge cases, ensuring the solution is correct and robust.

  ----------------
  Important:
  {lang_specific_tips}

  ## Response should include:
  - Step-by-step Critical Analysis (Issues, Edge Case Generation, Code Improvement)
  - Updated {language} code in a <code> block to solve the problem fully.

coding_improvement_B: |
  ## Problem:
  {problem_prompt}
  {sample_io_prompt}
  
  ## Code:
  {code}
  
  ## Test Report:
  {test_report}
  
  ## Critical Analysis:
  You are an expert competitive programmer.
  1. Identify which test cases it failed to solve and explain how it should have solved them
  2. Critically analyze the code and concisely suggest improvements
  
  # Improve code
  Modify the code so that it does not fail the test cases. You may need to completely rewrite it.
  ----------------
  Important:
  {lang_specific_tips}
  
  ## Your response must contain the Critical Analysis and then the {language} code inside <code> block to solve this problem.

trick_comparison: |
  Compare the following two tricks for how to solve the competitive coding question, and output which trick is more likely to solve the problem.
  
  # Problem
  {problem_prompt}
  
  # Trick A
  {trick_a}
  
  # Trick B
  {trick_b}
  --------------
  
  Compare the two tricks, by stating reasoning for and against for each of them for why solve the problem more correctly.
  At the end state your verdict on which trick is better by outputting either A if trick A is better or B if trick B is better.
  you MUST format your answer with the following XML. Include all explanation inside the analysis tag:
  
  <root>
  <analysis>
  ## Reasons for and against for each trick being the more likely one to solve the problem correctly.
  </analysis>
  <verdict>
  ## A single Letter A or B, denoting the trick that is more likely to be correct.
  </verdict>
  </root>

self-reflection: |
  You are given a code contest problem:

  problem description:
  =====
  {problem_prompt}
  {sample_io_prompt}
  =====


  Given the code contest problem, you have two tasks:
  1) Reflect on the problem, and describe it in your own words, in bullet points. Pay attention to small details, nuances, notes and examples in the problem description.
  2) Explain how each provided example input leads to the corresponding output (in total {{ actual_number_of_tests }} examples are provided).
  Read carefully the problem description. Make sure the test explanations are consistent with them, and between themselves.
  The explanation must coherently and logically lead from the input to the output. Be as specific as possible.

rules: |
  Below is a competitive coding problem:
  ```
  {problem_prompt}
  ```
  --------------
  What explict rules have been stated?
  For each rule, explain what the implications of it are. Do not make any assumptions or attempt to solve the problem.