kb_exemplars:
  content: |
    Given the below problem, provide 3 relevant and varied competitive coding problem examples, then for each identify the algorithm behind it and also explain the tutorial of the algorithm.
    These problems should have appeared previously in competitive coding competitions like codeforces, google code jam, meta hackercup.
    Make sure they are very relevant to the below problem with each distinct and varied.

    # Problem:
    {problem_prompt}

    # Exemplars:
    Recall {mapping_k} relevant and distinct problems (different from problem mentioned above).
    These problems should have appeared previously in competitive coding competitions like codeforces, google code jam, meta hackercup. 
    Make sure they require the same algorithm logic as the problem above. Try to make each successive example, better than the previous and different. For each problem:
    1. describe it
    2. generate {language} code step by step to solve that problem
    3. finally generate a planning to solve that problem

    # Algorithm:

    ----------------
    Important:
    Your response must follow the following xml format-

    <root>
    <problem>
    # Recall {mapping_k} relevant and distinct problems (different from problem mentioned above). Write each problem in the following format.
    <description>
    # Describe the problem.
    </description>
    <code>
    # Let's think step by step to solve this problem in {language} programming language.
    </code>
    <planning>
    # Planning to solve this problem.
    </planning>
    </problem>

    # similarly add more problems here...

    <algorithm>
    # Identify the algorithm (Brute-force, Dynamic Programming, Divide-and-conquer, Greedy, Backtracking, Recursive, Binary search, and so on) that needs to be used to solve the original problem.
    # Write a useful tutorial about the above mentioned algorithms. Provide a high level generic tutorial for solving these types of problems. Do not generate code.
    </algorithm>
    </root>

problem_planning_input:
  content: |
    Given a competitive programming problem generate a concrete planning to solve the problem.
    # Problem:
    {example_problem}
    # Planning:
    {example_planning}
    {algorithm_prompt}
    ## Problem to be solved:
    {problem_prompt}
    {sample_io_prompt}
    ## Planning:

    ----------------
    Important: You should give only the planning to solve the problem. Do not add extra explanation or words.

verification_input:
  content: |
    Given a competitive programming problem and a plan to solve the problem in {language}, tell whether the plan is correct to solve this problem.
    Determine if it meets time and memory complexity constraints and will pass test cases.
    # Problem:
    {problem_prompt}
    # Planning:
    {planning}

    ----------------
    Important: Your response must follow the following xml format-
    <root>
    <explanation> Discuss whether the given competitive programming problem is solvable by using the above mentioned planning.</explanation>
    <confidence> Confidence score regarding the solvability of the problem. Must be an integer between 0 and 100. </confidence>
    </root>

std_input_prompt:
  content: |
    ## Note: Strictly follow the input and output format.
    The input should be taken from Standard input and output should be given to standard output. 
    If you are writing a function then after the function definition take input using input() function then call the function with specified parameters and finally print the output of the function. 
    Do not add extra print statement otherwise it will failed the test cases.

code_generation_input:
  content: |
    Given a competitive programming problem generate {language} code to solve the problem.
    {algorithm_prompt}
    ## Problem to be solved:
    {problem_prompt}
    {sample_io_prompt}
    ## Planning:
    {planning}
    ## Let's think step by step.

    ----------------
    Important:
    {std_input_prompt}
    ## Your response must contain only the {language} code to solve this problem. Do not add extra explanation or words.

code_improvement_input:
  content: |
    Given a competitive programming problem you have generated {language} code to solve the problem. But the generated code cannot pass sample test cases. Improve your code to solve the problem correctly.
    {algorithm_prompt}
    ## Problem to be solved:
    {problem_prompt}
    ## Code Generated
    {response}
    ## Test Report:
    {test_log}
    ## Modified Planning:
    ## Let's think step by step to modify {language} Code for solving this problem. Taking into account what specific test cases are failing and why your code might differ from the correct reasoning given in the problem description.

    ----------------
    Important:
    {std_input_prompt}
    ## Your response must contain the modified planning and then the {language} code inside <code> block to solve this problem.

problem_prompt_rewrite:
  content: |
    You are given a competitive programming problem below. Extract the specified information from the prompt:
    
    # Problem:
    {problem_prompt}
    
    ----------------
    # Important:
    Your output must extract the following information in this exact format:
    
    Setup: Copy exactly all details provided describing how the task is setup.
    Task: Copy exactly all details about what the task to solve is.
    Input format: What the input looks like (e.g., numbers, arrays).
    Output format: What the output should be (e.g., print a number, list).
    Constraints: The limits for the inputs (e.g., how large numbers can be).
    Sample Explanations: Sample explanations of each tests case (each on a new line) that step by step walk through examples