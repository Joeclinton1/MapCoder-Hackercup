trick: |
  You are an expert competitive programmer.
  Determine the best possible time complexity taking into account all constraints and all details provided in the problem statement
  Identify {num_tricks} different but all similar tricks to solving the following competitive coding problem correctly and efficiently.
  For each trick, be concise, and focus on the crux of how it uses a given algorithm to solve the problem. Provided is a list of algorithms to help:
  
  # List of competitive coding algorithms
  {algorithms_list}
  
  # Problem to be solved:
  {problem_prompt}
  
  # Complexity
  1. With the largest input in mind (as given by constraints), calculate step by step what time complexity is required.
  2. Is an O(1) Math algorithm possible? Are approximate solutions allowed?
  
  # Tricks
  identify {num_tricks} different possible tricks to solving the following competitive coding problem correctly and efficiently.
  For each trick state it's time complexity, which must be less than the complexity determined initially.
  ----------------
  Important:
  Your response must contain the time complexity followed by {num_tricks} tricks. You must use this exact XML format:
  <root>
  <complexity>
  # 1. Max input determined time complexity. 2. Constant time possible? Approximations allowed?
  </complexity>
  <tricks>
  <trick>
  # Clever trick for solving problem, time complexity and memory complexity
  </trick>
  </tricks>
  
  # similarly add more tricks here...
    
  </root>

planning: |
  Given a competitive programming Problem and a Trick for how to solve, generate a concrete pseudocode planning to solve the problem.
  # Problem
  {problem_prompt}
  {sample_io_prompt}
  # Trick
  {trick}
  # Planning:
  
  ----------------
  Important: You should give only the planning to solve the problem. Do not add extra explanation or words. DO NOT GENERATE ANY CODE!

coding: |
  You are an expert competitive programmer.
  Given a competitive programming problem and a trick and plan for solving, generate correct {language} code to solve the problem.
  # Problem:
  {problem_prompt}
  # Trick:
  {trick}
  # Planning:
  {planning}

  ----------------
  Important:
  {lang_specific_tips}
  Encapsulate logic in functions.
  
  ## Your response must contain only the {language} code to solve this problem. Do not add extra explanation or words.

improve_plan_and_code: |

  Given a competitive programming problem you have generated {language} code to solve the problem. But the generated code cannot pass sample test cases.
  Improve the planning and then generate code to solve the problem correctly.
  ## Problem to be solved:
  {problem_prompt}
  ## Planning
  {planning}
  ## Code Generated
  {code}
  ## Test Report:
  {test_log}
  
  ----------------
  Important:
  Your output must be in the following format:
  ## Planning Improvement
  1. Concisely identify the first failed test case and explain, using Sample Explanation, why your plan failed on this test case.
  2. Concisely suggest a modification to the plan
  
  ## Code
  {language} code inside <code> block to solve this problem. Provide the ENTIRE code, not just the fixed section.
  
  ----------------
  {lang_specific_tips}
  Encapsulate logic in functions.
  
  ## Your response must contain the Planning Improvement and then the {language} code inside <code> block to solve this problem.

improve_plan_and_code_error: |
  Given a competitive programming problem you have generated {language} code to solve the problem. But the generated code fails with an error on the full test input.
  Improve the planning and then generate code to solve the problem correctly.
  ## Problem to be solved:
  {problem_prompt}
  ## Planning
  {planning}
  ## Code Generated
  {code}
  ## Error:
  {test_log}
  ## Modified Planning:
  ## Let's think step by step to modify {language} Code for solving this problem. Taking into account the error given.
  
  ----------------
  Important:
  {lang_specific_tips}
  
  ## Your response must contain the Planning Improvement and then the {language} code inside <code> block to solve this problem.