trick: |
  You are an expert competitive programmer.
  Determine the best possible time complexity taking into account all constraints and all details provided in the problem statement
  Identify {num_tricks} different but all similar tricks to solving the following competitive coding problem correctly and efficiently.
  For each trick, be concise, and focus on the crux of how it uses a given algorithm to solve the problem. Provided is a list of algorithms to help:
  
  # List of competitive coding algorithms
  {algorithms_list}
  
  # Problem to be solved:
  {problem_prompt}
  
  # Complexity
  1. With the largest input in mind (as given by constraints), calculate step by step what time complexity is required.
  3. Is an O(1) Math algorithm possible? Are approximate solutions allowed?
  
  # Tricks
  identify {num_tricks} different possible tricks to solving the following competitive coding problem correctly and efficiently.
  For each trick state it's time complexity, which must be less than the complexity determined initially.
  ----------------
  Important:
  Your response must contain the time complexity followed by {num_tricks} tricks. You must use this exact XML format:
  <root>
  <complexity>
  # 1. Max input determined time complexity. 2. Constant time possible? Approximations allowed?
  </complexity>
  <tricks>
  <trick>
  # Clever trick for solving problem, time complexity and memory complexity
  </trick>
  </tricks>
  
  # similarly add more tricks here...
    
  </root>

planning: |
  Given a competitive programming Problem and a Trick for how to solve, generate a concrete pseudocode planning to solve the problem.
  # Problem
  {problem_prompt}
  {sample_io_prompt}
  # Trick
  {trick}
  # Planning:
  
  ----------------
  Important: You should give only the planning to solve the problem. Do not add extra explanation or words. DO NOT GENERATE ANY CODE!

coding: |
  You are an expert competitive programmer.
  Given a competitive programming problem and a trick to use, generate concise but correct {language} code to solve the problem.
  # Problem:
  {problem_prompt}
  {sample_io_prompt}
  # Trick:
  {trick}
  # Planning:
  {planning}
  ## Let's think step by step.

  ----------------
  Important:
  {lang_specific_tips}
  Encapsulate logic in functions.
  
  ## Your response must contain only the {language} code to solve this problem. Do not add extra explanation or words.

code_improvement: |
  Given a competitive programming problem you have generated {language} code to solve the problem. But the generated code cannot pass sample test cases. Improve your code to solve the problem correctly.
  ## Problem to be solved:
  {problem_prompt}
  {sample_io_prompt}
  ## Failed test case 
  Expected output: {expected}
  Actual output: {actual}
  ## Code Generated:
  {code}
  ## Failed test case explanation:
  ## Using the provided Sample Explanations of the test cases, explain step by step how it should be working and identify what specifically in your code is causing this test case to fail.
  
  ----------------
  Important:
  {lang_specific_tips}
  
  ## Your response must contain the failed test case explanation and then the {language} code inside <code> block to solve this problem.

code_improvement_error: |
  Given a competitive programming problem you have generated {language} code to solve the problem. But the generated code fails with an error.
  ## Problem to be solved:
  {problem_prompt}
  {sample_io_prompt}
  ## Code Generated:
  {code}
  # Error
  {error}
  ## Error Explanation:

  ----------------
  Important:
  {lang_specific_tips}

  ## Your response must contain the Error Explanation and then the {language} code inside <code> block to fix the error.