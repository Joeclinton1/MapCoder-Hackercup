breakdown:
  content: |
    You are an expert competitive programmer, who doesn't make mistakes.
    
    Consider the following problem. Develop a concise, accurate, step by step plan to program a solution, breaking it
    down into multiple, simpler steps which can then be implemented and combined together.
    
    Identify appropriately which programming techniques should be used, such as dynamic programming, greedy search, 
    recursion, binary search, among any and all others.
    
    If necessary, specify which new, smaller functions should be defined, and how they should be recombined to produce 
    a working solution to the problem.
    
    IMPORTANT! Please do not include any code at all.
    
    {history}
    
    ## PROBLEM
    
    {problem_prompt}

  plan_hist_desc: |
    Summaries of previous approaches which did not work and failed miserably include:
    ----------------

  separator: |
    Plan {idx}: {plan}
    ----------------

breakdown_history:
  content: |
    Summarise the following plan to solve a competitive coding problem in a very short paragraph. Try to describe the
    core idea behind how the plan worked, delivering a short and concise response. Assume that the reader already has
    the context as to what the problem is. If any new functions were defined, briefly mention their function.
    
    {plan}

coding:
  content: |
    Consider the following competitive programming problem. Generate {language} code to solve the problem, adding
    concise relevant comments explaining how various statements in code align with the plan.
    
    ## Problem to be solved:
    {problem_prompt}
    
    ## Planning:
    {plan}
    
    ## Test cases:
    {sample_io_prompt}

    ----------------
    {std_input_prompt}


critique:
  content: |
    Consider the following competitive programming problem, solution and test outputs, written in {language}. Analyse
    why the test cases failed, and focus on making a single change to the code which will result in an improvement to
    performance. Important - you must code comment your change INSIDE the code, alongside your reasoning for it.
    
    ## Problem to be solved:
    {problem_prompt}
    
    ## Exisitng code:
    {code}
    
    ## Test case outcome:
    {test_log}
    
    ----------------
    {std_input_prompt}

improvement:
  content: |
    Look at the following solution to a competitive programming problem. Improve on the solution by addressing the
    criticisms raised, implementing fixes and changing the code in such a way that it produces a better outcome, solving
    more test cases. Add or change comments in the code where appropriate, justifying it's use in line with the
    critiques.
    
    ## Critique:
    {critique}
    
    ## Exisitng code:
    {code}
    
    ## Test case outcome:
    {test_log}
    
    ----------------
    {std_input_prompt}


std_input_prompt:
  content: |
    The input should be taken from Standard input and output should be given to standard output. 
    If you are writing a function then after the function definition take input using input() function then call the function with specified parameters and finally print the output of the function. 
    Do not add extra print statement otherwise it will failed the test cases.
    
    If you are writing the code as a function, make sure to CALL it so that it executes.
    
    ## IMPORTANT: Strictly follow the input and output format. Do not include any other text, including explanation.
    Only output a single code box with your code in {language}. If you do not, you will fail at your task.
    ONLY USE THE LIBRARIES THAT ARE PROVIDED IN PYTHON BY DEFAULT
