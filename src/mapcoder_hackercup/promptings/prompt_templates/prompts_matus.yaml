breakdown:
  content: |
    You are an expert competitive programmer, who doesn't make mistakes.
    
    Produce a correct and efficient pseudocode planning to solving the competitive coding problem.
    
    If necessary, specify which new, smaller functions should be defined, and how they should be recombined to produce 
    a working solution to the problem.
    
    IMPORTANT! Please do not include any code at all.
    
    {history}
    
    ## PROBLEM
    
    {problem_prompt}

  plan_hist_desc: |
    Summaries of previous approaches which did not work and failed miserably include:

  separator: |
    ##Plan
    {idx}: {plan}

breakdown_simple:
  content: |
    Consider the following problem. Develop a concise, accurate, step by step plan to program a solution, breaking it
    down into multiple, simpler steps which can then be implemented and combined together.
    
    Identify appropriately which programming techniques should be used, such as dynamic programming, greedy search, 
    recursion, binary search, among any and all others.
    
    If necessary, specify which new, smaller functions should be defined, and how they should be recombined to produce 
    a working solution to the problem.
    
    IMPORTANT! Please do not include any code at all.
    
    ## PROBLEM
    
    {problem_prompt}

breakdown_history:
  content: |
    Summarise the following failed plan to solve a competitive coding problem in a very short paragraph.
    
    {plan}

coding:
  content: |
    Consider the following competitive programming problem. Generate {language} code to solve the problem, adding
    concise relevant comments explaining how various statements in code align with the plan.
    
    ## Problem to be solved:
    {problem_prompt}
    
    ## Planning:
    {plan}
    
    ## Test cases:
    {sample_io_prompt}

    ----------------
    {std_input_prompt}


critique:
  content: |
    Consider the following competitive programming problem, solution and test outputs. Write a short paragraph analysing
    why the test cases failed, and suggest a fix which will result in an improvement in performance.
    
    ## Problem:
    {problem_prompt}
    
    ## Code:
    {code}
    
    ## Results:
    {test_log}

improvement:
  content: |
    Look at the following solution to a competitive programming problem. Consider the produced critique, implement the
    fixes and change the code in so that it produces a better outcome. Add, change or remove comments from the code
    where relevant.
    
    ## Critique:
    {critique}
    
    ## Exisitng code:
    {code}
    
    ## Test case outcome:
    {test_log}
    
    ----------------
    {std_input_prompt}


std_input_prompt:
  content: |
    The input should be taken from Standard input and output should be given to standard output. 
    If you are writing a function then after the function definition take input using input() function then call the function with specified parameters and finally print the output of the function. 
    Do not add extra print statement otherwise it will failed the test cases.
    
    If you are writing the code as a function, make sure to CALL it so that it executes.
    
    ## IMPORTANT: Strictly follow the input and output format. Do not include any other text, including explanation.
    Only output a single code box with your code in {language}. If you do not, you will fail at your task.
    ONLY USE THE LIBRARIES THAT ARE PROVIDED IN {language_upper} BY DEFAULT

std_input_prompt_old:
  content: |
    ## Note: Strictly follow the input and output format.
    The input should be taken from Standard input and output should be given to standard output. 
    If you are writing a function then after the function definition take input using input() function then call the function with specified parameters and finally print the output of the function. 
    Do not add extra print statement otherwise it will failed the test cases.
